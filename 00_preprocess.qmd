---
title: "Preprocessing with LAStools"
engine: knitr
---

## Relevant Resources

-   [LAStools Website](https://lastools.com)
-   [LAStools User Group](https://groups.google.com/g/lastools)

## Overview

Welcome to this preprocessing tutorial using LAStools. While `lidR` in R is a powerful tool for analyzing lidar data, it can be memory-intensive and slow when working with massive, raw point cloud collections. To ensure efficient processing in `lidR`, especially when using the `LAScatalog` engine, it's best practice to first preprocess the data using a tool designed for handling large files.

LAStools is a suite of highly efficient, command-line-based tools for processing lidar data. In this tutorial, you will learn how to perform three essential preprocessing steps: *tiling* to break large files into manageable chunks, *denoising* to classify and remove erroneous points, and *indexing* to create spatial indexes that accelerate read times.

Let's get started with preparing our lidar data for analysis!

## Environment

Unlike `lidR`, LAStools is standalone software that runs from the command line (e.g., Command Prompt on Windows) or via batch scripts (`.bat`). The commands shown here are intended for that environment.

::: callout-note
## Downloading LAStools

You must download LAStools from their official website. After unzipping the folder, you will find a `bin` directory containing all the executable tools (e.g., `lastile.exe`, `lasnoise.exe`). To run the commands, you either need to navigate to this `bin` directory in your command prompt or add the directory to your system's PATH environment variable.
:::

For the following examples, we will assume your raw `.laz` files are in a folder `C:\lidar_project\raw\` and you want to save the processed outputs to `C:\lidar_project\processed\`.

## Tiling with `lastile`

The first step is often to tile the data. A single, massive lidar file (or a collection of large, irregularly shaped files) is difficult to process. Tiling divides the data into a grid of smaller, square files. This is the foundation for efficient, parallel processing in `lidR`.

We use the `lastile` tool for this. The command below takes all `.laz` files from our `raw` directory and creates 500x500 meter tiles, each with a 25-meter buffer. This buffer is crucial to prevent edge artifacts when we later create seamless products like digital terrain models (DTMs).

```{cmd, eval = F}
# Create the output directory for the tiled files
mkdir C:\lidar_project\processed\tiled

# Run lastile
lastile -i "C:\lidar_project\raw\*.laz" -odir "C:\lidar_project\processed\tiled" -o ".laz" -tile_size 500 -buffer 25
```


## Command Breakdown

-i "C:\lidar_project\raw\*.laz": Specifies the input files. The * is a wildcard that selects all files ending with .laz in the directory.

-odir "...": Specifies the output directory where the new tiled files will be saved.

-o ".laz": Sets the output file extension to .laz (compressed format).

-tile_size 500: Sets the width and height of each tile to 500 units (e.g., meters).

-buffer 25: Adds a 25-unit buffer of points from adjacent tiles around each tile.


## Denoising `lasnoise`

Raw lidar data often contains noise pointsâ€”erroneous measurements that are typically far above or below the main point cloud. These points can be caused by sensor errors, atmospheric interference, or reflections from objects like birds. Noise can significantly skew analysis, so it's important to remove it.

The lasnoise tool identifies these isolated points and classifies them. We will run this command on the tiled files we just created.


```{cmd, eval = F}
lasnoise -i \tiled\*.laz -odir "_noise" -olaz
```

By default, lasnoise assigns noise points to classification code 7 (Low Point / Noise). It does not delete them. 

This is good practice, as it allows you to inspect the classified noise before deciding to permanently remove the points using a filter command like `las2las -i in.laz -o out.laz -drop_class 7`

## Indexing `lasindex`

The final step is to index our cleaned-up tiles. Indexing creates a small companion file (`.lax`) for each `.laz` file. This `.lax` file acts as a spatial index, allowing software like lidR to quickly find and read only the portions of a file it needs for a given query, rather than having to read the entire file.

```{cmd, eval = F}
lasindex -i \tiled\*.laz 
```







